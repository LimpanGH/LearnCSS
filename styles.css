/* Forts√§tt h√§r https://www.youtube.com/watch?v=9hXxGMJ2opw tid 32:18 */

/* Fakta h√§mtade fr√•n
  * https://www.youtube.com/watch?v=Yvd52i14NLU  HTML & CSS
  * https://www.youtube.com/watch?v=YAXotVH2cQM  CSS: Responsivitet
    https://www.youtube.com/watch?v=9hXxGMJ2opw  CSS: Positionering
    https://www.youtube.com/watch?v=3uMJimaduiQ  CSS Boxmodellen & typsnitt p√• webben
  * 
*/

/* Webbl√§saren till√§mpar CSS regler p√• ett dokument f√∂r att p√•verka hur de visas f√∂r anv√§ndaren. */

/* En regel best√•r av:
1. En upps√§ttning properties/egenskaper som har values/v√§rden vilka uppdaterar hur inneh√•llet i HTML visas, 
   dessa kallas f√∂r deklarationsblock.
2. En selektor ‚Äúv√§ljer‚Äù vilket eller vilka element som du vill till√§mpa deklarationsblocket p√•. 
   Exempelvis ‚Äú Jag vill till√§mpa min CSS regel p√• alla paragraph-element i mitt HTML dokument‚Äù */

/* Hur skriver vi CSS? */
p  {                      /* p √§r selektorn i detta fallet */
    color: red;         /* Detta √§r en deklaration */
    font-size: 12pt;      /* Detta √§r ytterligare en deklaration */
}                         /* Fr√•n { till } √§r sj√§lva deklarationsblocket */

/* 
* En deklaration best√•r av en property, tex color eller font-size och ett value, tex red eller 12pt.
* Ett property skiljs fr√•n v√§rdet med ett kolon och flera deklarationer separeras med ett semikolon.
* Tre s√§tt att till√§mpa CSS i HTML
    * Externt style sheet - vi laddar CSS fr√•n en fil till v√•r HTML. G√ñR S√ÖH√ÑR!
    * Internt style sheet - vi skriver CSS i v√•rt dokuments head-element. G√ñR EJ!
    * Styling inline - vi skriver VSS inuti v√•r markup i HTML. G√ñR EJ!
* Cascade I CSS syftar till att regeler som definieras i CSS draperar ned√•t beroende p√• k√§lla. 
    * 1. Externa
    * 2. Sid-specifika (interna)
    * 3. Inline

* Selektorer
    * Enkla Selektorer - Matchar ett eller flera element baserat p√• elementtyp, id eller class.
    * Attributselektorer - Matchar ett eller flera element baserat p√• deras attribut och attributv√§rden.
    * Pseudo-Klasser - Matchar ett eller flera element som existerar i ett visst tillst√•nd, t.ex. n√§r man hovrar √∂ver eller element.
    * Kombinatorer - √Är inte en egen selektor utan kombinerar flera selektorer f√∂r at f√• v√§ldigt specifika selektioner av element, eller grupper av element.
    * Multipla Selektorer - Lite som kombinatorer s√• √§r dessa inte en egen typ av selektor utan beskriver hur man kan s√§tta flera selektorer pa samma regel, 
      separerade med kommatecken, och p√• s√• sett applicera en upps√§ttning av deklarationer p√• alla element som selektorerna v√§ljer.
    * Hashtag # anv√§nds f√∂r att selektera en id-selector
    * Dot-selector . anv√§nds f√∂r att selektera en class-selector   */

/* Read more on selectors at https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors */

/* ID selector (octothorpe) (R√§knas som Enkel Selektor f√∂r de anv√§nds s√• ofta) */
#heading-1 {                    /* Selects the HTML-element with id="heading-1". */
    color: blue;
}

/* Class selector (R√§knas som Enkel Selektor f√∂r de anv√§nds s√• ofta) */
.red {                     /* Selects the HTML-element with class of "red". */
    color: red;
}

 /* Descendant selector, selects every p in the section*/
section p {
    color: green;
} 

/* Child selector, selects only the children-paragraphs in the section*/
section > p{
    color: yellow;
}

---------------------------------------------------------------------
/* Combinatory Selectors */

/* Adjacent siblling selector. */
h2 + p {                                    /* Selects the h2¬¥s first p-sibling*/ 
    text-transform: uppercase;              /* Transforms the text to uppercase */
}

/* General adjacent siblling selector. */
h2 ~p {                                     /* Selects all the h2¬¥s p-sibling. Represents elements with an attribute name of attr whose value is a whitespace-separated list of words, one of which is exactly value.*/ 
    border: 1px dashed black;             
}

---------------------------------------------------------------------
/* Attribute selectors. */

[data-vegetable] {                          /* To select attributes, we use square-brackets, [], around the attribute. */
    color: green
}

/* Attribute equals selector. */
[data-vegetable="liquid"] {                  /* Here we select an attribute with a specific value, i.e "liquid". */
    color: red
}

/* Attribute hyphenated selector */
[lang="sv-SE"] {                            /* Om man vill v√§lja detta attribut kan man skriva s√•h√§r*/
    color: red
}

[lang|=sv] {                                /* Med rak pipe anv√§nder vi hyphenated selector och d√• √§ndras specificiteten i ovanst√•ende exempel till att rikta sig mot alla attribut med bindestreck som har sv f√∂re eller efter sig. Represents elements with an attribute name of attr whose value can be exactly value or can begin with value immediately followed by a hyphen, - (U+002D). It is often used for language subcode matches. */
    color: aquamarine
}

/* Attribute begins with */
[data-quantity^="optional"] {               /* H√§r anv√§nder vi ^ f√∂r att p√•verka specificiteten. Represents elements with an attribute name of attr whose value is prefixed (preceded) by value. */
    opacity: 0.3;
}

/* Attribute ends with */
[data-quantity$="kg"] {                     /* H√§r anv√§nder vi $ f√∂r att p√•verka specificiteten. Represents elements with an attribute name of attr whose value is suffixed (followed) by value. */
    font-weight: bold;
}

/* Attribute contains  */                   /* H√§r anv√§nder vi * f√∂r att p√•verka specificiteten. Represents elements with an attribute name of attr whose value contains at least one occurrence of value within the string. */
[data-vegetable*="not spicy"] {
    text-decoration: underline;
}}


/* Pseudo selectors */
a {                                         /* Here we set the anchor tag to color aquamarine*/
    color: aquamarine;                   
}
a:hover{                                    /* Here we set the anchor tag to change from aquamarine to purple when we hoover on it*/
    color: purple;
}

/* Pseudo element*/
[href^=http]::after {                       /* H√§r l√§gger vi till ett element (en enh√∂rning) i HTML-dokumentet. Vi v√§ljer alla href som har ett attribut som b√∂rjar med https och v√§ljer att l√§gga elementet i slutet. Om vill ha det i b√∂rjan s√• byter vi ordet after mot ordet before*/
    content: ' ü¶Ñ';
}

/* Multiple selector */                     /* H√§r v√§ljer vi alla h2, p och a och √§ndrar deras typsnitt. */
h2,
p,
a {
    font-family: Arial, Helvetica, sans-serif;
}
---------------------------------------------------------------------

/* CSS Responsiveness */

/* Responsive Web Design (RWD): 
* En approach f√∂r hur man skapar den b√§sta m√∂jliga visuella upplevelsen oavsett enhetstyp och sk√§rmstorlek 
* Hj√§lper utvecklare att f√• kontroll √∂ver hur man anpassar en webbsida f√∂r olika visningsscernarion.
* Man kan testa responsivitet och layout genom att prova sidan p√• massa olika fysiska enheter eller med webbl√§sarens inbygda verktyg (inspector i chrome).
* Skillnade mellan responsiv design och adaptiv design √§r att den den responsiva varianten ska reagera oavsett vilken bredd webbl√§saren √§r i, medan den adaptiva endast
  bryr sig om specifika punter.
* Vi m√•ste anv√§nda detta f√∂r att v√•r sida ska kunna visas p√• alla typer av sk√§rmar.
* F√∂r att f√• en responsiv sida beh√∂ver vi ha med detta i HTMLs head: <meta name="viewport" content="width=device-width,initial-scale=1">
* H√§r √§r n√•gra sidor d√§r vi kan visualisera responsivitet: 
  https://googlesamples.github.io/web-fundamentals/fundamentals/design-and-ux/responsive/layout-shifter.html eller 
  https://googlesamples.github.io/web-fundamentals/fundamentals/design-and-ux/responsive/column-drop.html 
  https://googlesamples.github.io/web-fundamentals/fundamentals/design-and-ux/responsive/off-canvas.html 
*/

 /* Media queries */ 
 @media only screen and (max-width: 400px) {    /* H√§r skriver vi att n√§r tv√• kriterier uppfylls: alla enheter som har sk√§rmar OCH som har max-width 400px, d√• ska denna CSS kod appliceras p√• hemsidan. */
    body {background-color: red;
 }
}

---------------------------------------------------------------------
/* Positionering */

/* H√§r kan man se i slow motion hur en webbl√§sare tolkar och l√§ser in html och css i slow motion 
https://www.youtube.com/watch?v=ZTnIxIA5KGw  */

/* CSS Boxmodel. Alla element kommer f√• egenskaper utifr√•n boxmodel.
  * Margin - L√§gger till mellanrum utanf√∂r boxen, trycker bort andra boxar.
  * Border - L√§gger en ram runt elementet som vi definierar regeln f√∂r.
  * Padding - L√§gger till mellanrum inuti boxen, trycker bort inneh√•llet fr√•n kanten p√• boxen, (bakgrundsf√§rgen syns i padding). 
  * Content 

  * Eftersom boxar har fyra sidor s√• finns d√§r fyra typer av b√•de margin och padding: 
    * Margin: margin-top, margin-right, margin-bottom, margin-left
    * Padding: padding-top, padding-right, padding-bottom, padding-left
*/

  article > header {                    /* Man kan skriva s√•h√§r. */
    margin-top: 10px;  
    margin-right: 12px;  
    margin-bottom: 10px;  
    margin-left: 12px;
    
    padding-top 5px;
    padding-right 6px;
    padding-bottom 5px;
    padding-left 6px;
  }

  article > header {                    /* Men det √§r cleanare och snabbare att skriva med shorthands (enligt klockan) */
    margin: 10px 12px 10px 12px;        /* top, right, bottom, left*/
    padding: 5px 6px 5px 6px;           /* top, right, bottom, left*/
  }

  article > header {                    /* Om sidorna √§r lika l√•nga och √∂ver/under √§r lika l√•nga kan vi korta ner det √§nnu mer. */
    margin: 10px 12px;                  /* top and bottom, right and left. */
    padding: 5px 6px;                   /* top and bottom, right and left. */
  }

  /* Vertical margin collapse */
  p {                                   /* I detta exempel kan man tro att avst√•ndet mellan tv√• paragrafer ska vara h√∂gre √§n 40. Men CSS fungerar s√• att den mindre margin √§ts upp av den st√∂rre, kolapsar in i den st√∂rre. */
    color: white;
    background: gray;
    padding: 20px 0 20px 10px;
    margin-top: 10px
    margin-bottom: 40px;                /* Det √§r alts√• bara denna margin som kommer g√§lla*/
  }

/* Border skriv s√•h√§r: border:<storlek><typ><f√§rg>. */

/* Exempel: */
 p {
    border: 2px solid black;
 }

  /* Precis som med margin och padding kan vi nyttja top, right, left och bottom f√∂r att ha olika border colors. */
  p {
    border-top: 1px solid black
    border-right: 1px solid red;
    border-bottom: 1px solid blue;
    border-left: 1px solid green;
  }

 /* Box-sizing. Hur r√§knas storlek ut p√• boxar? Borde v√§l vara egenskaperna width och height?
 Vi kan f√• storlek p√• delarna i boxen att bli best√§mda m√•tt utan att br√•ka med varandra genom att i head l√§gga till: */
 * {
  box-sizing: border-box;
 }
/* F√∂r att undvika huvudv√§rk, anv√§nd border-box. */

/* Det √§r en god praxis att resetta f√∂rinst√§llda margin och padding: */
 * {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
 }

 /* Det finns tv√• typer av boxar, block och inline 
   * Blockelement
     * Tar upp en hel rad, nya block p√• ny rad
     * De tar bara upp hela bredden av sin f√∂r√§lder
     * De f√•r sin h√∂jd baserad p√• sitt inneh√•ll
  * Inline-element
    * Anv√§nds inte f√∂r layout, utan f√∂r att ge styling till element inuti block-element
    * De till√•ter andra element att l√§gga sig brevid dem p√• samma rad
    * Dess bredd baseras p√• dess inneh√•ll, inte bredden p√• sin f√∂r√§lder
  
 * Vi kan med CSS s√§ga till ett blockelement att det ska bete sig som ett inline-element och vice versa med hj√§lp av egenskapen display.

 */





* Margin edge
* Border edge
* Padding edge
* Content edge



kolla denna sen 
https://www.youtube.com/watch?v=3uMJimaduiQ